1. Implement a simple BankAccount function that uses closures to maintain a balance. The deposit and withdraw methods should modify the balance and return the updated balance.

2. Write a function processData(data, callback) that processes the input data by doubling it, then calls the callback with the processed data.

3. Create a promise-based function wait(ms) that resolves after a specified number of milliseconds.

4. Task: Implement a function fetchAllData() that simulates fetching data from multiple sources concurrently using Promise.all().

                function fetchDataFromAPI1() {
                    return new Promise(resolve => {
                        setTimeout(() => resolve('Data from API1'), 1000);
                    });
                }
                function fetchDataFromAPI2() {
                    return new Promise(resolve => {
                        setTimeout(() => resolve('Data from API2'), 1500);
                    });
                }

                Promise.all([fetchDataFromAPI1(), fetchDataFromAPI2()])
                    .then(results => {
                        console.log(results); // ['Data from API1', 'Data from API2']
                    });

5. Create a function fetchDataFromAPI that simulates fetching data from an API. Handle potential errors using .catch(), and implement error recovery strategies (e.g., retrying the request after a delay).